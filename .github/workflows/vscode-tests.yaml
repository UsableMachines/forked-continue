name: VS Code testing
on:
  push:
    branches:
      - pe/ci-testing

jobs:
  build:
    strategy:
      matrix:
        include:
          # - os: windows-latest
          #   platform: win32
          #   arch: x64
          #   npm_config_arch: x64
          # - os: windows-latest
          #   platform: win32
          #   arch: arm64
          #   npm_config_arch: arm
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: x64
          #   npm_config_arch: x64
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: arm64
          #   npm_config_arch: arm64
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: armhf
          #   npm_config_arch: arm
          - os: ubuntu-latest
            platform: alpine
            arch: x64
            npm_config_arch: x64
          # - os: macos-12 # should migrate this to the newer x64 version of macos-14
          #   platform: darwin
          #   arch: x64
          #   npm_config_arch: x64
          # - os: macos-12 # same here, especially
          #   platform: darwin
          #   arch: arm64
          #   npm_config_arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      # 1. Check-out repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This ensures all tags are fetched

      - name: Checkout tag
        run: git checkout ${GITHUB_REF#refs/tags/}

      # 2. Install npm dependencies
      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache extension node_modules
        uses: actions/cache@v3
        with:
          path: extensions/vscode/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('extensions/vscode/package-lock.json') }}

      - name: Cache core node_modules
        uses: actions/cache@v3
        with:
          path: core/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('core/package-lock.json') }}

      - name: Cache gui node_modules
        uses: actions/cache@v3
        with:
          path: gui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('gui/package-lock.json') }}

      - name: Install extension Dependencies
        run: |
          cd extensions/vscode
          npm ci
        env:
          # https://github.com/microsoft/vscode-ripgrep/issues/9#issuecomment-643965333
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Install gui Dependencies
        run: |
          cd gui
          npm ci

      - name: Install Core Dependencies
        run: |
          cd core
          npm ci

      # 2.5. Pre package
      - name: Set var for environment info
        shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV

      - name: Prepackage the extension
        run: |
          cd extensions/vscode
          npm run prepackage -- --target ${{ env.target }}

      # 3. Re-install esbuild (for cases that we force installed for another arch in prepackage.js)
      - name: Re-install esbuild
        run: |
          cd extensions/vscode
          npm install -f esbuild

      - name: Package the extension
        run: cd extensions/vscode && npx vsce package --pre-release --no-dependencies --target ${{ env.target }}

      # 4. Run tests for the extension
      - name: Run headless test
        uses: coactions/setup-xvfb@v1
        with:
          run: npm test
          working-directory: ./extensions/vscode
      # - name: Install Xvfb for Linux and run tests
      #   run: |
      #     sudo apt-get install -y xvfb # Install Xvfb
      #     Xvfb :99 & # Start Xvfb
      #     export DISPLAY=:99 # Export the display number to the environment
      #     cd extensions/vscode
      #     npm run test
      #   if: matrix.os == 'ubuntu-latest'

      # - name: Run extension tests
      #   run: |
      #     cd extensions/vscode
      #     npm run test
      #   if: matrix.os != 'ubuntu-latest'
